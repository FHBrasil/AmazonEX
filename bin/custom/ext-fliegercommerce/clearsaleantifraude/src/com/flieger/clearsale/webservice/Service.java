package com.flieger.clearsale.webservice;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;

import org.apache.log4j.Logger;

import com.flieger.clearsale.utils.config.ServiceConfig;


/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.2.6-1b01 Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "Service", targetNamespace = "http://www.clearsale.com.br/integration")
public class Service extends javax.xml.ws.Service
{
	private static final String WEBSERVICE_URL = "clearsaleantifraude.webservice.url";
	private static final String TARGET_NAMESPACE = "http://www.clearsale.com.br/integration";
	protected static final Logger LOG = Logger.getLogger(Service.class);
	private static URL SERVICE_WSDL_LOCATION = null;
	private static WebServiceException SERVICE_EXCEPTION = null;
	private final static QName SERVICE_QNAME = new QName(TARGET_NAMESPACE, "Service");

	private static void getWsdlConnection()
	{
		URL url = null;
		WebServiceException e = null;
		try
		{
			url = new URL(ServiceConfig.getParameter(WEBSERVICE_URL));
		}
		catch (final MalformedURLException ex)
		{
			e = new WebServiceException(ex);
		}
		SERVICE_WSDL_LOCATION = url;
		SERVICE_EXCEPTION = e;
	}

	public Service()
	{
		super(__getWsdlLocation(), SERVICE_QNAME);
	}

	public Service(final WebServiceFeature... features)
	{
		super(__getWsdlLocation(), SERVICE_QNAME, features);
	}

	public Service(final URL wsdlLocation)
	{
		super(wsdlLocation, SERVICE_QNAME);
	}

	public Service(final URL wsdlLocation, final WebServiceFeature... features)
	{
		super(wsdlLocation, SERVICE_QNAME, features);
	}

	public Service(final URL wsdlLocation, final QName serviceName)
	{
		super(wsdlLocation, serviceName);
	}

	public Service(final URL wsdlLocation, final QName serviceName, final WebServiceFeature... features)
	{
		super(wsdlLocation, serviceName, features);
	}

	/**
	 * 
	 * @return returns ServiceSoap
	 */
	@WebEndpoint(name = "ServiceSoap")
	public ServiceSoap getServiceSoap()
	{
		return super.getPort(new QName(TARGET_NAMESPACE, "ServiceSoap"), ServiceSoap.class);
	}

	/**
	 * 
	 * @param features
	 *           A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy. Supported features not in
	 *           the <code>features</code> parameter will have their default values.
	 * @return returns ServiceSoap
	 */
	@WebEndpoint(name = "ServiceSoap")
	public ServiceSoap getServiceSoap(final WebServiceFeature... features)
	{
		return super.getPort(new QName(TARGET_NAMESPACE, "ServiceSoap"), ServiceSoap.class, features);
	}

	/**
	 * 
	 * @return returns ServiceSoap
	 */
	@WebEndpoint(name = "ServiceSoap12")
	public ServiceSoap getServiceSoap12()
	{
		return super.getPort(new QName(TARGET_NAMESPACE, "ServiceSoap12"), ServiceSoap.class);
	}

	/**
	 * 
	 * @param features
	 *           A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy. Supported features not in
	 *           the <code>features</code> parameter will have their default values.
	 * @return returns ServiceSoap
	 */
	@WebEndpoint(name = "ServiceSoap12")
	public ServiceSoap getServiceSoap12(final WebServiceFeature... features)
	{
		return super.getPort(new QName(TARGET_NAMESPACE, "ServiceSoap12"), ServiceSoap.class, features);
	}

	/**
	 * 
	 * @return returns ServiceHttpGet
	 */
	@WebEndpoint(name = "ServiceHttpGet")
	public ServiceHttpGet getServiceHttpGet()
	{
		return super.getPort(new QName(TARGET_NAMESPACE, "ServiceHttpGet"), ServiceHttpGet.class);
	}

	/**
	 * 
	 * @param features
	 *           A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy. Supported features not in
	 *           the <code>features</code> parameter will have their default values.
	 * @return returns ServiceHttpGet
	 */
	@WebEndpoint(name = "ServiceHttpGet")
	public ServiceHttpGet getServiceHttpGet(final WebServiceFeature... features)
	{
		return super.getPort(new QName(TARGET_NAMESPACE, "ServiceHttpGet"), ServiceHttpGet.class, features);
	}

	/**
	 * 
	 * @return returns ServiceHttpPost
	 */
	@WebEndpoint(name = "ServiceHttpPost")
	public ServiceHttpPost getServiceHttpPost()
	{
		return super.getPort(new QName(TARGET_NAMESPACE, "ServiceHttpPost"), ServiceHttpPost.class);
	}

	/**
	 * 
	 * @param features
	 *           A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy. Supported features not in
	 *           the <code>features</code> parameter will have their default values.
	 * @return returns ServiceHttpPost
	 */
	@WebEndpoint(name = "ServiceHttpPost")
	public ServiceHttpPost getServiceHttpPost(final WebServiceFeature... features)
	{
		return super.getPort(new QName(TARGET_NAMESPACE, "ServiceHttpPost"), ServiceHttpPost.class, features);
	}

	private static URL __getWsdlLocation()
	{
		if (SERVICE_EXCEPTION == null)
		{
			getWsdlConnection();
		}
		else
		{
			return SERVICE_WSDL_LOCATION;
		}
		return SERVICE_WSDL_LOCATION;
	}

}
