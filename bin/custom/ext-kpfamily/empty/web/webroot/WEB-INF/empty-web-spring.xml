<?xml version="1.0" encoding="UTF-8"?>
<!--
 [y] hybris Platform

 Copyright (c) 2000-2013 hybris AG
 All rights reserved.

 This software is the confidential and proprietary information of hybris
 ("Confidential Information"). You shall not disclose such Confidential
 Information and shall use it only in accordance with the terms of the
 license agreement you entered into with hybris.
-->


<!-- 
  WARNING: This is the Spring WEB configuration file. If you want to replace
  items or managers you have to do this from the extensions core configuration 
  file (empty/resources/empty-spring.xml) 
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:mvc="http://www.springframework.org/schema/mvc"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:util="http://www.springframework.org/schema/util"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc.xsd
      http://www.springframework.org/schema/util
      http://www.springframework.org/schema/util/spring-util.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop.xsd"
      >
           
    <!-- <context:annotation-config/> -->
    <context:component-scan base-package="de.flieger.controller" />

    <mvc:annotation-driven ignoreDefaultModelOnRedirect="true">
      <mvc:message-converters>
         <!-- <bean class="org.springframework.http.converter.ResourceHttpMessageConverter"/> -->
         <bean class="xml.factory.Jaxb2HttpMessageConverter">
		      <property name="jaxbContextFactory" ref="jaxbContextFactory" />
		      <property name="marshallerProperties">
		         <map>
		            <entry key="jaxb.formatted.output">
		               <value type="java.lang.Boolean">true</value>
		            </entry>
		            <entry key="jaxb.encoding" value="UTF-8" />
		             <entry key="eclipselink.media-type" value="application/xml" />
		         </map>
		     </property>
		     <property name="unmarshallerProperties">
		        <map merge="true">
		           <entry key="eclipselink.media-type" value="application/xml" />
		        </map>
		     </property>
		     <property name="supportedMediaTypes">
		        <list>
		       <!--  { MediaType.APPLICATION_XML, MediaType.TEXT_XML, new MediaType("application", "*+xml") }); -->
		           <util:constant id="xml" static-field="org.springframework.http.MediaType.APPLICATION_XML" />
		           <util:constant id="textXml" static-field="org.springframework.http.MediaType.TEXT_XML" />
		        </list>
		     </property>
		   </bean>
      </mvc:message-converters>
   </mvc:annotation-driven>

   <bean id="jaxbContextFactory" class="xml.factory.MoxyJaxbContextFactoryImpl">
      <property name="wrapCollections" value="false" />
      <property name="typeAdapters">
         <list>
            <value>xml.adapter.DateAdapter</value>
            <value>xml.adapter.StringAdapter</value>
         </list>
      </property>
   </bean>
   
 <!--   <bean id="jaxbContext" class="javax.xml.bind.JAXBContext" factory-method="newInstance">
	  <constructor-arg>
	    <list>
	       <value>xml.factory.MoxyJaxbContextFactoryImpl</value>
	    </list>
	  </constructor-arg>
	</bean> -->
	
	<!-- Spring managed FilterChain for hybris Filter stack -->
   <bean id="emptyPlatformFilterChain" class="de.hybris.platform.servicelayer.web.PlatformFilterChain">
      <constructor-arg>
         <list>
            <ref bean="log4jFilter"/>
            <ref bean="dynamicTenantActivationFilter"/>
            <ref bean="sessionFilter"/>
            <ref bean="emptySecureMediaFilter"/>            
         </list>
      </constructor-arg>
   </bean>
 
   <bean id="emptySecureMediaFilter" class="de.hybris.platform.servicelayer.web.SecureMediaFilter">
       <property name="mediaPermissionService" ref="mediaPermissionService"/>
       <property name="modelService" ref="modelService"/>
       <property name="userService" ref="userService"/>
       <property name="mediaService" ref="mediaService"/>
      <!-- <property name="secureMediaToken" value="securemedias"/>  securemedias is default but you may overwrite it -->
    </bean>
</beans>
